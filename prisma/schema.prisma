// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userAddress   UserAddres[] // 1:n relation
  orders        Order[] // 1:n relation
  cart          Cart? // 1:1 relation 
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserAddres {
  id            String  @id @default(cuid())
  country       String
  city          String
  postCode      String
  street        String?
  buldingNumber String
  flatNumber    String?
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
}

model Products {
  id              String                   @id @default(cuid())
  name            String
  description     String
  price           Float
  attributeValues ProductAttributeValues[]
  productType     ProductType              @relation(fields: [productTypeId], references: [id])
  productTypeId   String
  CartItem        CartItem[]
  OrderItem       OrderItem[]
}

model ProductType {
  id              String                      @id @default(cuid())
  name            String
  description     String
  products        Products[]
  attributeValues ProductTypeAttributeValue[]
}

model ProductTypeAttributeValue {
  id               String         @id @default(cuid())
  productType      ProductType    @relation(fields: [productTypeId], references: [id])
  productTypeId    String
  attributeValue   AttributeValue @relation(fields: [attributeValueId], references: [id])
  attributeValueId String
  sequence         Int
}

model Attribute {
  id              String           @id @default(cuid())
  name            String
  description     String
  attributeValues AttributeValue[]
}

model AttributeValue {
  id                         String                      @id @default(cuid())
  name                       String
  description                String
  attribute                  Attribute                   @relation(fields: [attributeId], references: [id])
  attributeId                String
  productTypeAttributeValues ProductTypeAttributeValue[]

  productAttributeValues ProductAttributeValues[]
}

model ProductAttributeValues {
  id               String         @id @default(cuid())
  product          Products       @relation(fields: [productId], references: [id])
  productId        String
  attributeValue   AttributeValue @relation(fields: [attributeValueId], references: [id])
  attributeValueId String
}

model CartItem {
  id        String   @id @default(cuid())
  product   Products @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  Cart      Cart?    @relation(fields: [cartId], references: [id])
  cartId    String?
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  cartItems CartItem[]
}

model Order {
  id         String      @id @default(cuid())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  orderItems OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Products @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}
